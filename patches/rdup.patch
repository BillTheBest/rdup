diff -r gfunc.c gfunc.c
11a12,14
> extern gboolean opt_printrem;
> extern gboolean opt_printmod;
> extern char *opt_format;
16c19
< static gboolean
---
> /*static gboolean
35c38
< }
---
> }*/
59c62
<  */
---
>  *
74c77
< 		/* do some magic here:
---
> 		* do some magic here:
78c81
< 		 */
---
> 		 *
99c102
< 			/* only print content when we're adding */
---
> 			* only print content when we're adding *
106c109
< 			/* only print content when we're adding */
---
> 			* only print content when we're adding *
137a141,259
> } */
> 
> 
> /**
>  * print an escape sequence correctly 
>  */
> 
> static void
> entry_print_escape(char n, FILE *out) {
> switch (n) {
> 	case 'a': fputc('\a', out); break;
> 	case 'b': fputc('\b', out); break;
> 	case 'e': fputc('\e', out); break;
> 	case 'f': fputc('\f', out); break;
> 	case 'r': fputc('\r', out); break;
> 	case 't': fputc('\t', out); break;
> 	case 'v': fputc('\v', out); break;
> 	case '0': fputc('\0'; out); break;
> 
> 	case 'n':
> 		/* reverse compatiblity: when -0 is on, put out a NULL. */
> 		if (opt_null) fputc('\0', out);
> 			else fputc('\n', out); 
> 		break;
> 
> 	default:
> 		fputc(n, out); 
> 		break;
> 	}
> 
> return;
> }
> 
> /**
>  * print arbitrary data field 
>  */
> 
> static void
> entry_print_data(char n, FILE *out, struct entry *e) {
> switch (n) {
> 	case 'n': fputs(e->f_name, out);		break;
> 	case 'l': fprintf(out, "%zd", e->f_name_size);	break;
> 	case 'u': fprintf(out, "%d", e->f_uid);		break;
> 	case 'g': fprintf(out, "%d", e->f_gid);		break;
> 	case 'm': fprintf(out, "%d", e->f_mode);	break;
> 
> 	case 't': 
> 		fprintf(out, "%ld", (unsigned long)e->f_mtime);	
> 		break;	
> 
> 	case 's': 
> 		/* don't report size for directories. */
> 		if (S_ISDIR(e->f_mode)) {
> 			putchar('0');
> 			break;
> 			}
> 
> 		fprintf(out, "%ld", (unsigned long)e->f_size);
> 		break;
> 
> 	case 'T': 
> 		if (S_ISDIR(e->f_mode)) putchar('d');
> 		else if (S_ISLNK(e->f_mode)) putchar('l');
> 		else putchar('-');
> 		break;
> 
> 	default:
> 		fputc(' ', out);
> 		break;
> 	}
> 
> return;
> }
> 
> /**
>  * print function
>  */
> 
> void 
> entry_print(FILE *out, char plusmin, struct entry *e)
> {
> char *pos;
> 
> 
> if ((plusmin == '+') && (opt_printmod == FALSE)) return;
> if ((plusmin == '-') && (opt_printrem == FALSE)) return;
> 
> for (pos = opt_format; *pos != '\0';  ++pos) {
> 	switch (*pos) {
> 
> 		/* c-style escapes are valid */
> 		case '\\':
> 			++pos;
> 			entry_print_escape(*pos, out);
> 			break;
> 		
> 
> 		/* emit data */
> 		case '%':
> 			++pos;
> 
> 			switch (*pos) {
> 				case '%': fputc('%', out); break;
> 				case 'p': fputc(plusmin, out); break;
> 
> 				default: 
> 					entry_print_data(*pos, out, e);
> 					break;
> 				}
> 			break;
> 
> 		/* don't know? echo it. */
> 		default:
> 			fputc(*pos, out);
> 			break;
> 		}
> 	}
> 
> return;
189c311
< 		if (opt_null) {
---
> 		/*if (opt_null) {
193c315
< 		}
---
> 		}*/
206c328
< 				if (opt_null) {
---
> 				/*if (opt_null) {
210c332
< 				}
---
> 				}*/
215c337
< 					if (opt_null) {
---
> 					/*if (opt_null) {
219c341
< 					}
---
> 					}*/
238a361
> /*
243a367
> */
diff -r rdup.c rdup.c
11a12
> char *opt_format = "%p%m %u %g %l %s %n\n";
15a17,20
> 
> gboolean opt_printrem = 1;
> gboolean opt_printmod = 1;
> 
45a51,53
> 	fprintf(f, "   -f FORMAT\tuse specified format string\n");
> 	fprintf(f, "   -r\t\tonly print removed files (overrides -m)\n");
> 	fprintf(f, "   -m\t\tonly print new/modified files (overrides -r)\n");
193c201
< 	while ((c = getopt (argc, argv, "chVnN:s:vqx0")) != -1) {
---
> 	while ((c = getopt (argc, argv, "rmchVnN:s:vqx0f:")) != -1) {
236a245,255
> 			case 'f':
> 				opt_format = optarg;
> 				break;
> 			case 'r':
> 				opt_printrem = 1;
> 				opt_printmod = 0;
> 				break;
> 			case 'm':
> 				opt_printrem = 0;
> 				opt_printmod = 1;
> 				break;
