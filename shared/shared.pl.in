# shared perl function
# this is included by the other utils

# make autoconf happy
#datarootdir=@datarootdir@

sub version {
    print "$_[0]: @PACKAGE_VERSION@ (rdup-utils)\n";
    exit;
}

# sanity_check the input
sub sanity_check {
    my ($prog, $dump, $bits, $psize, $fsize, $uid, $gid) = @_;
    die "** $prog: dump must be + or -; -c option forgotten?" 
	if $dump ne "+" && $dump ne "-";
    die "** $prog: bits must be octal; -c option forgotten?" 
	unless $bits =~ "[0-7]+";
    die "** $prog: psize must be numeric; -c option forgotten?" 
	unless $psize =~ "[0-9]+";
    die "** $prog: fsize must be numeric; -c option forgotten?" 
	unless $fsize =~ "[0-9]+";
    die "** $prog: uid must be numeric; -c option forgotten?" 
	unless $uid =~ "[0-9]+";
    die "** $prog: gid must be numeric; -c option forgotten?" 
	unless $gid =~ "[0-9]+";
}

# copy a FILE DESC to a PIPE
sub copyout {
    my ($count, $pipe) = @_;
    my ($buf, $n);

    while ($count > 4096) {
	$n = read STDIN, $buf, 4096;
	syswrite $pipe, $buf, $n;
	$count -= 4096;
    }
    if ($count > 0) {
	$n = read STDIN, $buf, $count;
	syswrite $pipe, $buf, $n;
    }
}

# cat from FILE DESC to STDOUT
sub cat {
    my $file = shift;
    my ($buf, $n);

    while (($n = read $file, $buf, 4096) > 0) {
	syswrite STDOUT, $buf, $n;
    }
}

# cat from FILE to STDOUT
sub catfile {
    my $name = shift;
    open FILE, "<$name" or die "** $name: $!";
    cat(*FILE);
    close FILE;
}

# set the r_uid/g_uid with the original uid/gid
# usefull for remote backups. SLOOOOWWW
sub chown_attr {
    my ($attr, $xuid, $xgid, $file) = @_;
    return unless $attr;
    if ($^O eq "linux") {
	$err += system("attr -q -s r_uid -V$xuid \"$file\" 2>/dev/null; attr -q -s r_gid -V$xgid \"$file\" 2>/dev/null");
    }
    if ($^O eq "solaris") {
	$err += system("runat \"$file\" \"echo $xuid > r_uid\" 2>/dev/null; runat \"$file\" \"echo $xgid > r_gid\" 2>/dev/null");
    }
    #warn "** Could not set xattr on $file" if ($err ne 0); Happens too often
}

# check if the system supports extended attributes
sub check_attr {
    if ($^O eq "linux") {
	map {return 1 if -x $_ . '/' . "attr"}  split(/:/, $ENV{'PATH'});
    }
    if ($^O eq "solaris") {
	map {return 1 if -x $_ . '/' . "runat"}  split(/:/, $ENV{'PATH'});
    }
    warn "** Cannot set extended attributes";
    0;
}

# chmod or warn
sub rchmod {
    my ($bits, $file) = (shift, shift);
    chmod oct($bits), $file or warn "** Cannot chmod $file: $!";
}

# chown or warn
sub rchown {
    my ($uid, $gid, $file) = (shift, shift, shift);
    chown $uid, $gid, $file; # or warn "** Cannot chown $file: $!";
}

# check if a file exists
sub exist {
    lstat(shift);
    return 0 unless -e _;
    1;
}

# check if gettext is there, if so return object of that class
# otherwise return fake object and we will use our own get (see below)
# on that
sub i18n {
    my $d;
    eval('use Locale::gettext;');
    if ($@) {
	$d = bless \$d, "main";
    } else {
	setlocale(LC_ALL, "");
	$d = Locale::gettext->domain("@PACKAGE_NAME@");
	my $prefix="@prefix@"; # fuck autoconf
	my $datarootdir="@datarootdir@"; # fuck autconf, part 2
	$d->dir("@localedir@");
    }
    $d;
}

# fake get for systems without gettext, the identity function
sub get {
    @_;
}

# keep
1;
