
# shared perl function
# this is included by the other utils

# show the version, $progname needs to be set!
sub version {
        print "$_[0]: @PACKAGE_VERSION@ (rdup-utils)\n";
        exit;
}

# sanity_check the input
sub sanity_check {
        my $dump = $_[0];
        my $bits = $_[1];
        my $psize = $_[2];
        my $fsize = $_[3];
        my $uid = $_[4];
        my $gid = $_[5];

        die "** $progName: dump must be + or -"   if $dump ne "+" && $dump ne "-";
        die "** $progName: bits must be otcal"    unless $bits =~ "[0-7]+";
        die "** $progName: psize must be numeric" unless $psize =~ "[0-9]+";
        die "** $progName: fsize must be numeric" unless $fsize =~ "[0-9]+";
        die "** $progName: uid must be numeric"   unless $uid =~ "[0-9]+";
        die "** $progName: gid must be numeric"   unless $gid =~ "[0-9]+";
}

# copy a FILE DESC to a PIPE
sub copyout {
        my $count = $_[0];
        my $pipe = $_[1];

        my $buf;
        my $n;

        while ($count > 4096) {
                $n = read STDIN, $buf, 4096;
                syswrite $pipe, $buf, $n;
                $count -= 4096;
        }
        if ($count > 0) {
                $n = read STDIN, $buf, $count;
                syswrite $pipe, $buf, $n;
        }
}

# cat from FILE DESC to STDOUT
sub cat {
        my $file = $_[0];

        my $buf;
        my $n;

        while (($n = read $file, $buf, 4096) > 0) {
                syswrite STDOUT, $buf, $n;
        }
}

# cat from FILE to STDOUT
sub catfile {
        my $name = $_[0];
        open FILE, "<$name" or die "** $name: $!";
        cat(*FILE);
        close FILE;
}

# set the r_uid/g_uid with the original uid/gid
# usefull for remote backups
sub chown_attr {
	my $attr = $_[0];
        return unless $attr;

        my $xuid = $_[1];
        my $xgid = $_[2];
        my $file = $_[3];
        my $err = 0;

        if ($^O eq "linux") {
                $err += system("attr -q -s r_uid -V$xuid \"$file\" 2>/dev/null; attr -q -s r_gid -V$xgid \"$file\" 2>/dev/null");
        }
        if ($^O eq "solaris") {
                 $err += system("runat \"$file\" \"echo $xuid > r_uid\" 2>/dev/null; runat \"$file\" \"echo $xgid > r_gid\" 2>/dev/null");
        }
        #warn "** Could not set xattr on $file" if ($err ne 0); Happens too often
}

# check if the system supports extended attributes
sub check_attr {
        if ($^O eq "linux") {
                map {return 1 if -x $_ . '/' . "attr"}  split(/:/, $ENV{'PATH'});
        }
        if ($^O eq "solaris") {
                map {return 1 if -x $_ . '/' . "runat"}  split(/:/, $ENV{'PATH'});
        }
        warn "** Cannot set extended attributes";
        return 0;
}

# chmod or warn
sub rchmod {
        my $bits = $_[0];
        my $file = $_[1];
        chmod oct($bits), $file or warn "** Cannot chmod $file: $!";
}

# chown or warn
sub rchown {
        my $uid = $_[0];
        my $gid = $_[1];
        my $file = $_[2];
        chown $uid, $gid, $file; # or warn "** Cannot chown $file: $!";
}

sub syslog_open {
        my $p = $_[0];
        openlog($p, 'cons, pid', 'daemon') or die "** Cannot open syslog";
}

sub syslog_log {
        $f = $_[0];
        shift; 
        syslog('info', $f, @_);
}

# check if a file exists
sub exist {
        my $filename = $_[0];

        lstat($filename);
        return 0 unless -e _;
        return 1;
}

# keep
1;
