#!/bin/bash

# restore a backup to a directory
# try to be as smart of dump.sh

prefix=@prefix@
exec_prefix=@exec_prefix@
cstream=@cstream@

usage() {
        echo "$PROGNAME [OPTIONS] [+DAY] -t TO_DIR FROM_DIR [FROM_DIR ...]"
        echo 
        echo "This is a wrapper around rdup, rorrim.sh and monthday.sh"
        echo
        echo "+DAY       - restore up to this month day, defaults to 0"
        echo "-t TO_DIR  - restore to this directory"
        echo "FROM_DIR   - restore from these directorie(s)"
        echo
        echo OPTIONS:
        echo " -k KEYFILE encrypt all files"
        echo " -c REMOTE  dump the backup on a remote machine with ssh"
        echo " -p NUM     strip NUM leading components from file names"
        echo " -s SIZE    limit output to files smaller than SIZE"
        echo " -l NUM     limit transfer to NUM bytes/second, see cstream(1)'s -t"
        echo " -z         compress all files"
        echo " -v         echo the files processed to stderr"
        echo " -h         this help"
        echo " -V         print version"
}

version() {
        echo "$PROGNAME: @PACKAGE_VERSION@ (rdup-utils)"
}

d=`date +%Y%m`
PROGNAME=$0
gzip=0
KEYFILE=""
monthday=0
to_dir=""
verbose=""
dirstrip=0
remote=""
bwidth=""

_echo2() {
        echo "** $PROGNAME: $1" > /dev/fd/2
}

while getopts ":c:k:l:p:t:zhVv" o; do
        case $o in
                k) KEYFILE=$OPTARG;;
                t) to_dir=$OPTARG;;
                c) remote=$OPTARG;;
                l) bwidth=$OPTARG;;
                z) gzip=1;;
                p) dirstrip=$OPTARG;;
                v) verbose="-v";;
                V) version && exit;;
                h) usage && exit;;
                \?) _echo2 "Invalid option"; usage && exit;;
        esac
done
shift $((OPTIND - 1))

if [[ ! $dirstrip =~ "[0-9]+" ]]; then
        _echo2 "Argument to -p must be numeric"
        exit 1
fi
if [[ $dirstrip -lt 0 || $dirstrip -gt 10 ]]; then
        _echo2 "-p argument out of bounds [0..10]"
        exit 1
fi
if [[ ! -z $bwidth && -z $cstream ]]; then
        _echo2 "Bandwidth shaping not enabled: cstream not found"
        exit 1
fi
# fix the argument string
dirstrip="-p $dirstrip"

# +DAY argument
if [[ $1 =~ "\\+(.+)" ]]; then
        monthday=${BASH_REMATCH[1]}
        if [[ ! $monthday =~ "[0-9]+" ]]; then
                _echo2 "+DAY must be numerical"
                exit 1
        fi
        # rest of the arguments is frm_dir
        shift
fi
if [[ -z "$to_dir" ]]; then
        _echo2 "Need a directory to restore to"
        exit 1
fi
if [[ $monthday -lt 0 || $monthday -gt 31 ]]; then
        _echo2 "+DAY out of bounds [0..31]"
        exit 1
fi

if [[ -z "$remote" ]]; then
        # no remote
        if [[ -z "$KEYFILE" ]]; then
                if [[ $gzip -eq 0 ]]; then
                        @sbindir@/rdup -n /dev/null "$@" | \
                        @sbindir@/monthday.sh +$monthday | \
                        @sbindir@/rorrim.sh $dirstrip $verbose "$to_dir"
                else 
                        @sbindir@/rdup -n -c /dev/null "$@" | \
                        @sbindir@/monthday.sh -c +$monthday | \
                        @sbindir@/gzip.sh -d | \
                        @sbindir@/rorrim.sh $dirstrip $verbose -c "$to_dir"
                fi
        else
                if [[ $gzip -eq 0 ]]; then
                        @sbindir@/rdup -n -c /dev/null "@$" | \
                        @sbindir@/monthday.sh -c +$monthday | \
                        @sbindir@/crypt.sh -d  $KEYFILE | \
                        @sbindir@/rorrim.sh $dirstrip $verbose -c "$to_dir"
                else 
                        @sbindir@/rdup -n -c /dev/null "$@" |
                        @sbindir@/monthday.sh -c +$monthday | \
                        @sbindir@/crypt.sh -d $KEYFILE | \ 
                        @sbindir@/gzip.sh -d | @sbindir@/rorrim.sh $dirstrip $verbose -c "$to_dir"
                fi
        fi
else
        # remote
        if [[ -z "$KEYFILE" ]]; then
                if [[ $gzip -eq 0 ]]; then
                        if [[ -z $bwidth ]]; then
                                ssh -x -C "$remote" rdup -n -c /dev/null "$@" | \
                                @sbindir@/monthday.sh -c +$monthday | \
                                @sbindir@/rorrim.sh -c $dirstrip $verbose "$to_dir"
                        else
                                ssh -x -C "$remote" rdup -n -c /dev/null "$@" | \
                                $cstream -t $bwidth | \
                                @sbindir@/monthday.sh -c +$monthday | \
                                @sbindir@/rorrim.sh -c $dirstrip $verbose "$to_dir"

                        fi
                else 
                        if [[ -z $bwidth ]]; then
                                ssh -x "$remote" rdup -n -c /dev/null "$@" | \
                                @sbindir@/monthday.sh -c +$monthday | \
                                @sbindir@/gzip.sh -d | \
                                @sbindir@/rorrim.sh -c $dirstrip $verbose "$to_dir"
                        else
                                ssh -x "$remote" rdup -n -c /dev/null "$@" | \
                                $cstream -t $bwidth | \
                                @sbindir@/monthday.sh -c +$monthday | \
                                @sbindir@/gzip.sh -d | \
                                @sbindir@/rorrim.sh -c $dirstrip $verbose "$to_dir"
                        fi
                fi
        else
                if [[ $gzip -eq 0 ]]; then
                        if [[ -z $bwidth ]]; then
                                ssh -x -C "$remote" rdup -n -c /dev/null "$@" | \
                                @sbindir@/monthday.sh -c +$monthday | \
                                @sbindir@/crypt.sh -d  $KEYFILE | \
                                @sbindir@/rorrim.sh -c $dirstrip $verbose "$to_dir"
                        else
                                ssh -x -C "$remote" rdup -n -c /dev/null "$@" | \
                                $cstream -t $bwidth | \
                                @sbindir@/monthday.sh -c +$monthday | \
                                @sbindir@/crypt.sh -d  $KEYFILE | \
                                @sbindir@/rorrim.sh -c $dirstrip $verbose "$to_dir"
                        fi
                else 
                        if [[ -z $bwidth ]]; then
                                ssh -x "$remote" rdup -n -c /dev/null "$@" | \
                                @sbindir@/monthday.sh -c +$monthday | \
                                @sbindir@/crypt.sh -d $KEYFILE | \ 
                                @sbindir@/gzip.sh -d | \
                                @sbindir@/rorrim.sh -c $dirstrip $verbose "$to_dir"
                        else
                                ssh -x "$remote" rdup -n -c /dev/null "$@" | \
                                $cstream -t $bwidth | \
                                @sbindir@/monthday.sh +$monthday | \
                                @sbindir@/crypt.sh -d $KEYFILE | \ 
                                @sbindir@/gzip.sh -d | \
                                @sbindir@/rorrim.sh -c $dirstrip $verbose "$to_dir"
                        fi
                fi
        fi
fi
