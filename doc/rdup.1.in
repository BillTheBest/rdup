'\" t
.TH RDUP 1 "24 Dec 2005" "@PACKAGE_VERSION@" "@PACKAGE_NAME@ utils"
.SH NAME
@PACKAGE_NAME@ \- generate a file list suitable for making backups
.SH SYNOPSIS
.B @PACKAGE_NAME@
[\fI\-N timestamp\fR]
[\fIOPTION...\fR]
[\fIFILELIST\fR]
[\fIDIR/FILE...\fR]

.SH DESCRIPTION
\fBrdup\fR is a utility inspired by rsync and the plan9 way of doing
backups. \fBrdup\fR itself does not backup anything. It only prints
a list of files that are changed, or all files in case of a null dump.
It also handles files that are removed, allowing for correct incremental 
backups. All paths printed are absolute. See rdup-backups(1) for an
introduction.
.PP
The
.IR FILELIST
is a internal list \fBrdup\fR writes to, to keep track of which files
are in a backup. If you don't want this (i.e. make a full
backup), use \fI/dev/null\fR here. The file \fI/dev/null\fR is handled
specially by \fBrdup\fR: if detected no new file list is written. This
is useful when doing full backups and you want all files to be printed.

FILELIST is needed to calculate which files are to removed from a backup.
.PP
The
.IR DIRS/FILES
can be specified multiple times. These are the directories and files
you want to backup.
.PP
If the \fI\-N timestamp\fR option is not given, all paths found are
printed. Only when a \fI\-N timestamp\fR file is given, times can be
compared and an incremental output can be generated.
.PP
\fBrdup\fR prints a filelist to standard output. 
Subsequent programs in a pipe line can be used to actually
implement to backup scheme. If FILELIST is empty or non existent all
files in DIR are dumped. This is the same as a null dump. After a run
a new FILELIST is written. No warning is given when FILELIST is an
existing file, it just gets overwritten by \fBrdup\fR. New runs will
print out only those files that have actually changed or are removed
since the last run, thereby making incremental backups possible.
.PP
Files are checked for changes by comparing the m_time (modification time),
if this time is NEWER than the m_time of FILELIST the pathname is printed
to standard output. When files are removed they are also printed to 
standard output, but they are prefixed with a '-'. See 
.B FORMAT
below. The default format \fBrdup\fR uses is: "%p%T %b %m %u %g %l %s %n\\n"

Note, that \fBrdup\fR also supports hashing of files, this makes it
possible to check the local hash with the hash of the backed up file.
.PP
All errors are written to standard error.
If the directory or file does not exist, they are skipped and a
warning is emitted.
.PP
The general idea is to be very UNIX like and create a bunch of simple programs
which each do a their specific thing very well. With \fBrdup\fR and a
small shell script (50 lines) one can implement encrypted and compressed
backups.

.SH BACKUP POLICY
As \fBrdup\fR doesn't backup anything, the backup policy; what you
backup, how you backup, how often and how you restore; is all left
to the scripts. See the Section \fBUTILITIES\fR for a run down on what
\fBrdup\fR's default backup policy is.

.SH OPTIONS
.TP
.B \-F format
Specify a printf-style format to use. See \fBFORMAT\fR below.
.TP
.B \-N timestamp
use the m_time of file \fBtimestamp\fR as the timestamp to decide what to
include in the incremental backup list. If \fBtimestamp\fR does not exist
of full dump is performed. 
.B rdup
will create/touch \fBtimestamp\fR after it has printed the file list.
This means if something goes wrong, you still have the original
timestamp.
.TP
.B \-R
Reverse the output of \fBrdup\fR. Tools accepting this ouput must
create leading directory as they see them. This option allows a script --
running as a normal user -- to put files in a directory which could have
0600 as its permission.
.TP
.B \-E file
The file named 'file' contains a list of Perl-compatible regular
expressions (PCRE) , one per line, that \fBrdup\fR will use to 
\fIexclude\fR names. A '#' at the start of the line can be used to signal a comment.
Empty lines are discarded. The \fI\-0\fR option also affects the
format of this file.

If a directory is excluded, \fBrdup\fR won't descend in that directory,
so all files in that directory are also excluded.

The directories leading up to the directory to be backed up can not
be excluded. If you use a command line like: 

.RS
        rdup /dev/null /home/miekg/bin
.RE
.RS

The directories '/home', '/home/miekg', '/home/miekg/bin' are always printed.

If you want to exclude the file '/home/miekg/blaat' you need to add
the following regular expression: '/home/miekg/blaat'. 

If you want
to exclude all .mozilla/cache directories of all users you can 
use '/home/.*/.mozilla/cache/.*'. This doesn't exclude the directory
itself and I'm assuming that the users' home directories are found
under '/home'.

Also note that \fBrdup\fR does not print directories with a
trailing slash.
.RE

.TP
.B \-V
Print rdup's version.
.TP
.B \-h
Give an overview of the options.
.TP
.B \-n
Don't honor .nobackup files. Normally if such files are found the directory is not
printed to standard output, now it is.
.TP
.B \-c
Print the files' contents to standard output. This sets
the FORMAT string to: "%p%T %b %u %g %l %s\\n%n%C"

Note this creates a race condition: if a file changes in size after
rdup has crawled it and before it has been sent to the remote server,
the backup will fail. \fBrdup\fR will check for file size changes, but
this doesn't remove the race condition.

This option is used when streaming your backup to a remote machine. Note
that the remote machine must have \fBrdup\fR installed.
.TP
.B \-r
Only print removed files; entries that start with a `\-'. This 
option unsets \-m.
.TP
.B \-m
Only print modified/new files; entries that start with a `+'. This
option unsets \-r.
.TP
.B \-l
Local backups, do not check for file size changes.
.TP
.B \-v
Be more verbose. 
When used once, processed .nobackup files will be
printed to standard error. When used twice each path will also be
printed to standard error. This is usefull in case of a remote
backup (\fI\-c\fR) where the normal output is not seen.
.TP
.B \-s size
Only output files smaller then \fBsize\fR bytes. This can be used to limit
the amount of data to be transferred when doing a remote backup.
This option \fIonly\fR applies to files and symbolic links, \fInot\fR
to directories.
.TP
.B \-0
Delimit \fBfilelist\fR with NULL's instead of a newline. Use '\\0' in the
\fBformat\fR string to change \fBrdup\fR's output.
.TP
.B \-x
Stay on the local filesystem.

.SH BACKUPS
With:
.RS
        rm -f timestamp && rdup -N timestamp LIST DIR
.RE

All full-dump filelist is printed to standard output. And with:
.RS
        rdup -N timestamp LIST DIR
.RE

An incremental dump filelist is printed. The file \fItimestamp\fR
is used to save the exact time of rdup's run. The file \fILIST\fR is
used to calculate the correct incremental dump list, this is needed
for files that are removed, or have a different type.

.SH FORMAT
The default format \fBrdup\fR uses is: "%p%T %b %u %g %l %s %n\\n"
.PP
The following escape sequences are understood by \fBrdup\fR:

.BR
        'p': '+' if file is new/modified, '-' if removed
.BR
        'b': permission bits from lstat(2), octal in four digits
.BR
        'm': the file mode bits, st_mode from lstat(2), decimal digits
.BR
        'u': uid
.BR
        'g': gid
.BR
        'l': path name length
.BR
        's': file size (zero if directory)
.BR
        'n': path
.BR
        't': time of modification (seconds from epoch)
.BR
        'H': the SHA1 hash of the regular file, all zeros ("0") for all other types
.BR
        'T': file type: -: normal file, l: symlink, h: hardlink, d:
	directory, c: character device, b: block device, p: named pipe
	and s: socket.
.BR
        'C': the content of the file (none for all other types)
.PP
To delimit the output of \fBrdup\fR with NULLs you can use '\\0' in the
format string.

.SH FILELIST
\fBrdup\fR writes the FILELIST in the following format:
.RS
MODE DEV INODE PATH_SIZE PATH
.RE
.PP
Where MODE is the st_mode from stat(2), PATH_SIZE is the length of 
PATH. Where PATH is the path of the file. DEV is the dev id as returned
by the stat call and INODE is the inode number - \fBrdup\fR needs this
info to decide if a directory is renamed.

A typical example is: 
.RS
33216 2310 444739411 8 bin/rdup
.RE

.SH OUTPUT FORMAT 
The default output generated by \fBrdup\fR is formatted like:
.RS
+|-TYPE BITS UID GID PATH_SIZE FILE_SIZE PATH
.RE
.PP
Where:
.TP
.B o +|-
plus or minus, indicating whether PATH should added or removed.
.TP 
.B o TYPE
the type of the see %T in \fBFORMAT\fR.
.TP
.B o BITS
the permission of the file, this is a subset of the st_mode from
lstat(2). These are four octal digits.
.TP
.B o UID
the numerical user id of PATH. Note that if the first character of the
line is '-' (i.e. remove) the UID will be zero.
.TP
.B o GID
the numerical group id of PATH. Note that if the first character of the
line is '-' (i.e. remove) the GID will be zero.
.TP
.B o PATH_SIZE
the size of PATH. Normally this is not needed, but when PATH contains
spaces this can come in handy.
.TP
.B o FILE_SIZE
the size of file pointed to by PATH. Note that if the first character of the line is '-'
(.ie. remove) the SIZE will be zero. For directories this size will
always be zero. Symbolic and hard links are handled differently, see
CAVEATS.
.TP
.B o PATH
the pathname
.PP
A typical example might look like this:
        +- 0755 1000 1000 8 11288 bin/rdup
.PP
This example show that the file should be backed up, has a user
and group id of 1000, the length of the path is 8 bytes, the size
of the file it 11288 and it has "bin/rdup" as a path.
.PP
Directories are always printed by \fBrdup\fR.

.SH OUTPUT FORMAT WITH \-c
The output generated by \fBrdup -c\fR is formatted like:
.RS
        +|-TYPE BITS UID GID PATH_SIZE FILE_SIZE\\n
        PATH FILE_CONTENTS
.RE
.PP
This makes it possible possible for a remote shell script to receive the
actual file and make a backup.
.PP
All field are identical as described in \fBOUTPUT FORMAT\fR, but
there is one extra field and the following cavaets.
.TP
.B o FILE_CONTENTS
The entire file is concatenated to standard output.

.SS CAVEATS
.TP
.B o symbolic and hard links
the PATH name is generated from the link's name and its target. A symlink like

.RS
    /home/bin/blaat -> /home/bin/bliep
.RE

is printed as '/home/bin/blaat -> /home/bin/bliep'. The PATH_SIZE
is modified accordingly.
The FILE_SIZE is not needed, so it is set the size of the link's
name, in this case the length of '/home/bin/blaat'.

If rdup encounters a hardlink it is handled in the same way, but the
output type is set to 'h' instead of 'l'.

.TP
.B o character/block devices
The size field (%s) is changed to hold the major,minor number of
the device. So if a major number is 8 and the minor number is 0 (under
Linux this is /dev/sda), its size will be \fB8,0\fR. The numbers are
only seperated with a comma (,).

The output when using the \-c is changed as follows, for:
.TP
.B o directories:
the FILE_SIZE is zero and no content is printed. Thus:
.RS
        +d 0755 1000 1000 11 0\\n
        \fB/home/miekg\fR
.RE
.TP
.B o regular files:
the FILE_SIZE is used as-is and the entire file contents
is printed to standard output. Thus:
.RS
        +- 0644 1000 1000 32 6\\n
        \fB/home/miekg/svn/rdup/trunk/aaa/a\fR\fIhello\fR
.RE
Where \fBaaa/a\fR is a regular file containing the word 'hello\\n'

.SH UTILITIES
Various perl scripts are included with rdup. Linked together these
script actually implement the backup scheme. 
.PP
The more important scripts are:
.TP
.B rdup-simple
Create a (hard link) snapshot. Hard links saves space so you can keep
a very long record of previous backups. This is wrapper around
`rdup-snap` and `rdup`. Also supports the remote backups.
.TP
.B rdup-gzip
acts as a compression filter.
.TP
.B rdup-crypt
acts as a encryption (mcrypt) filter.
.TP
.B rdup-gpg
acts as a encryption (gpg) filter.
.TP
.B rdup-restore
a wrapper scripts around `rdup' and `rdup-snap' to ease restoring.

.SH EXAMPLES

.SS BACKUPS
\fBrdup-simple\fR is a wrapper which implements these (and more) pipelines:

.SS full dump of /home 
rdup /tmp/HOMELIST ~ | rdup-snap \-b /vol/backup

.SS full gzipped dump of /home
rdup \-c /tmp/HOMELIST ~ | rdup-gzip | rdup-snap \-c \-b /vol/backup

.SS full remote dump of /home
rdup \-c /tmp/HOMELIST ~ | ssh \-C miekg@example.com rdup-snap \-c \-b /vol/backup

The \fI\-C\fR compresses the stream.

.SS full encrypted remote dump of /home
rdup \-c /tmp/HOMELIST ~ | rdup-crypt KEYFILE | 
ssh miekg@example.com rdup-snap \-c \-b /vol/backup

.SS full encrypted, gzipped remote dump of /home

rdup \-c /tmp/HOMELIST ~ | rdup-crypt KEYFILE | rdup-gzip | 
ssh miekg@example.com rdup-snap \-c \-b /vol/backup

.SS RESTORES
\fBrdup-restore\fR is a wrapper which implements these (and more) pipelines:

.SS restore of /home to /tmp/restore
rdup /dev/null /vol/backup/HOST/200604/home |
rdup-snap -b /tmp/restore -R

.SH USEFULL EXTERNAL TOOLS
As \fBrdup\fR only prints names it depends on external tools and scripts
to make it really usefull. Luckily there are lots of those:
.TP
.B o cstream 
a tool the implement bandwidth shaping (for remote backups).
.TP
.B o dirsplit 
split a directory into DVD sized volumes for easy burning.

.SH EXIT CODE
\fBrdup\fR return a zero exit code on success, otherwise 1 is returned.

.SH FILES
\fBrdup\fR uses `@sysconfdir@/rdup' as directory where the timestamp
and filelist files are put, but this is completely overrideable by the
user.

.SH AUTHOR
Written by Miek Gieben. 

.SH REPORTING BUGS
Report bugs to <miek@miek.nl>. 

.SH BUGS/LIMITATIONS
See the \-c flag for explanation about a small race condition when doing
remote dumps. 
.PP
Sparse files are not detected by the default rdup utilities.
.PP
Extended attributes are not copied. 

.SH SEE ALSO
rdup-simple(1), rdup-snap(1) and rdup-restore(1). See
rdup-backups(1) for an introduction into creating backups. See regex(7)
for an intro to regular expressions.

.SH COPYRIGHT
Copyright (C) 2005-2008 Miek Gieben. This is free software. There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE.
.PP
Licensed under the GPL version 3. See the file LICENSE in the source distribution
of rdup.
