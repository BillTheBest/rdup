'\" t
.TH RDUP-TR 1 "27 Nov 2008" "@PACKAGE_VERSION@" "@PACKAGE_NAME@"
.SH NAME
@PACKAGE_NAME@-tr \- transform rdup output
.SH SYNOPSIS
.B @PACKAGE_NAME@-tr
[\fI\-N timestamp\fR]
[\fIOPTION...\fR]
\fIFILELIST\fR
\fIDIR/FILE...\fR

.SH DESCRIPTION
Transform rdup output into something else. Where something else can
be a tar, cpio, pax archive or another rdup stream.

When creating such output you might also want to 'pipe' the contents
of each file through a number of commands, say a compression and 
encryption utility. Note that this is different than compressing the
\fIentire\fR archive which can be done by using the \-z option of
GNU tar. So this is where rdup-tr comes in. It allows you to create
an normal archive in which \fIeach\fR file is encrypted.

This command combines all previously written rdup-utils
(rdup-gzip, rdup-crypt, rdup-gpg, etc) into a single executable, making
it much more maintainable.

\fBrdup-tr\fR works by forking off a number of child processes (those
commands named with the \-P option(s)), interconnecting these
with pipes. The output created by these child processes is
captured in a temporary file in /tmp. From there the contents
it put in an archive, then the file is truncated and the
process restarts for the next file. In an ASCII image:

.RS
                     stdout
            +----------------------------------> archive
           /  
    rdup-tr     loop #files        <---+
      |                                |
      +-> cmd1 | cmd2 | ...| cmdN > tmpfile

.RE

Creating a compressed and encrypted tar archive out of a full
rdup dump might be done as follows

    rdup /dev/null /home | rdup-tr -Pgzip,-c,-f\\
    -Pmcrypt,-fKEY,-c -O tar > my-home-zipped-and-crypted.tar

Or even pack and unpack it on the fly

    rdup /dev/null /home | rdup-tr -Pgzip,-c,-f\\
    -Pmcrypt,-fKEY,-c -O tar | ssh user@remotehost tar xvCf /tmp -

.SS NOTE
When creating an archive out of plain rdup output you will
\fIloose\fR the information concerning the files that are to be
removed. Only the modified and new files are included in the
archive. The output format 'rdup' does not have this limitation.

.SH OPTIONS
.TP
.B \-P\fIcommand\fR,\fIopt1\fR,...,\fIopt5\fR
Filter all output through command, \fIopt1\fR through \fIopt5\fR are
given as options to the command. Multiple \-P can be used, there is
however a maximum of five options for each command. The options
are separated with commas, there is no space in between.
.TP
.B \-L
Select list input format. Normally \fBrdup-tr\fR accepts rdup output,
which this option you can read a list of path names.
.TP
.B \-O
Output format. This can be 'tar', 'cpio', 'pax', 'rdup' or 'head'.
With 'head' only the file names are echoed to stdout and in case
of 'rdup' input the rdup header. 'head' is mainly used for debugging.
.TP
.B \-c
Force output to the tty. Normally \fBrdup-tr\fR wants to see it's
output redirected.
.TP
.B \-v
Be more verbose. 
.TP
.B \-V
Print rdup-tr's version.
.TP
.B \-h
Give an overview of the options.

.SH EXIT CODE
\fBrdup-tr\fR return a zero exit code on success, otherwise 1 is returned.

.SH AUTHOR
Written by Miek Gieben. 

.SH REPORTING BUGS
Report bugs to <miek@miek.nl>. 

.SH SEE ALSO
http:/www.miek.nl/projects/rdup is the main site of rdup.

.SH COPYRIGHT
Copyright (C) 2005-2009 Miek Gieben. This is free software. There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE.
.PP
Licensed under the GPL version 3. See the file LICENSE in the source distribution
of rdup.
