'\" t
.TH RDUP 8 "24 Dec 2005" "@PACKAGE_VERSION@" "@PACKAGE_NAME@ utils"
.SH NAME
@PACKAGE_NAME@ \- generate a file list suitable for making backups
.SH SYNOPSIS
.B @PACKAGE_NAME@
[
.IR \-N 
timestamp
]
[
.IR OPTIONS
]
.IR FILELIST 
.IR DIRS/FILES ...

.SH DESCRIPTION
\fBrdup\fR is a utility inspired by rsync and the plan9 way of doing
backups. \fBrdup\fR itself does not backup anything. It only prints
a list of files that are changed, or all files in case of a null dump.
It also handles files that are removed, allowing for correct incremental 
backups. All paths printed are absolute.
.PP
The
.IR FILELIST
is a internal list \fBrdup\fR writes to, to keep track of which files
are in a backup. If you don't want this (i.e. make a full
backup), use \fI/dev/null\fR here.
.PP
The
.IR DIRS/FILES
can be specified multiple times. These are the directories and files
you want to backup.
.PP
If the \fI\-N timestamp\fR option is not given, all paths founds are
printed. Only when a \fI\-N timestamp\fR file is given, times can be
compared and an incremental output can be generated.
.PP
\fBrdup\fR prints a filelist to standard output. 
Subsequent programs in a pipe line can be used to actually
implement to backup scheme. If FILELIST is empty or non existant all
files in DIR are dumped. This is the same as a null dump. After a run
a new FILELIST is written. No warning is given when FILELIST is an
existing file, it just gets overwritten by \fBrdup\fR. New runs will
print out only those files that have actually changed or are removed
since the last run, thereby making incremental backups possible.
.PP
Files are checked for changes by comparing the m_time (modification time),
if this time is NEWER than the m_time of FILELIST the pathname is printed
to standard output. When files are removed they are also printed to 
standard output, but they are prefixed with a '-'. See 
.B FORMAT
below.
All errors are written to standard error.
.PP
If the directorie or file does not exist, they are skipped and a
warning is emitted.
.PP
The general idea is to be very unix like and create a bunch of simple programs
which each do a their specific thing very well. With \fBrdup\fR and a
small shell script (50 lines) one can implement encrypted and compressed
backups.

.SH BACKUP POLICY
As \fBrdup\fR doesn't backup anything, the backup policy; what you
backup, how you backup, how often and how you restore; is all left
to the scripts. See the Section \fBSCRIPTS\fR for a run down on what
\fBrdup\fR's backup policy is.

.SH OPTIONS
.TP
.B \-F format
Specify a printf-style format to use. See \fBFORMAT\fR below.
.TP
.B \-N timestamp
use the m_time of file \fBtimestamp\fR as the timestamp to decide what to
include in the incremental backup list. If \fBtimestamp\fR does not exist
of full dump is performed. 
.B rdup
will create/touch \fBtimestamp\fR after it has printed the file list.
This means if something goes wrong, you still have the original
timestamp.
.TP
.B \-V
Print rdup's version.
.TP
.B \-h
Give an overview of the options.
.TP
.B \-n
Don't honor .nobackup files. Normally if such files are found the directory is not
printed to standard output, now it is.
.TP
.B \-a
Read the uid and gid information from the file's extended user attributes:
\'r_uid' and 'r_gid'. This option only works if \fBrdup\fR was built with
xattr support.

This option is usefull when restoring a remote backup. Normally these
backups are transferred by a non-root user. This user will not be able
to correctly set all uid/gid information. As a workaround rdup's scripts
will set the extended attributes for the file to store the original
uid/gid. With this option \fBrdup\fR will re-insert these original
uid/gid in its output.

.TP
.B \-c
Print the files' contents to standard output. This sets
the FORMAT string to: "%p%m %u %g %l %s\\n%n%C";
.TP
.B \-r
Only print removed files; entries that start with a `\-'. This 
option unsets \-m.
.TP
.B \-m
Only print modified/new files; entries that start with a `+'. This
option unsets \-r.
.TP
.B \-l
Local backups, do not check for file size changes.
.TP
.B \-v
Be more verbose. 
When used once, processed .nobackup files will be
printed to standard error. When used twice each path will also be
printed to standard error. This is usefull in case of a remote
backup (\fI\-c\fR) where the normal output is not seen.
.TP
.B \-s size
Only output files smaller then \fBsize\fR bytes. This can be used to limit
the amount of data to be transferred when doing a remote backup.
This option \fIonly\fR applies to files and symbolic links, \fInot\fR
to directories.
.TP
.B \-0
Delimit \fBfilelist\fR with NULL's instead of a newline. Use '\\0' in the
\fBformat\fR string to change \fBrdup\fR's output.
.TP
.B \-x
Stay on the local filesystem.

.SH BACKUPS
With:
        rm -f timestamp && rdup -N timestamp LIST DIR

All full-dump filelist is printed to standard output. And with:

        rdup -N timestamp LIST DIR

An incremental dump filelist is printed.

.SH FORMAT
The default format \fBrdup\fR uses is: "%p%m %u %g %l %s %n\\n"
.PP
The following escape sequences are understood by \fBrdup\fR:

        'p': '+' if file is new/modified, '-' if removed
        'm': mode from lstat(2)
        'u': uid 
        'g': gid 
        'l': path name length
        's': file size (zero if directory)
        'n': path 
        't': time of modification (seconds from epoch)
        'T': 'type' - 'd'/'l'/'-' for directory, link or file.
        'C': the content of the file/link (none for directories)
.PP
To delimit the outout of \fBrdup\fR with NULLs you can use '\\0' in the 
format string.

.SH FILELIST
\fBrdup\fR write the FILELIST in the following format:
        MODE PATH
.PP
Where MODE is the st_mode from stat(2) and PATH is the path of the file. A
typical example is: 
        33216 bin/rdup

.SH OUTPUT FORMAT 
The default output generated by \fBrdup\fR is formatted like:
        +|-MODE UID GID PATH_SIZE FILE_SIZE PATH
.PP
Where:
.TP
.B o +|-
plus or minus, indicating whether PATH should added or removed.
.TP
.B o MODE
the st_mode from stat(2).
.TP
.B o UID
the numerical user id of PATH. Note that if the first character of the
line is '-' (i.e. remove) the UID will be zero.
.TP
.B o GID
the numerical group id of PATH. Note that if the first character of the
line is '-' (i.e. remove) the GID will be zero.
.TP
.B o PATH_SIZE
the size of PATH. Normally this is not needed, but when PATH contains
spaces this can come in handy.
.TP
.B o FILE_SIZE
the size of file pointed to by PATH. Note that if the first character of the line is '-'
(.ie. remove) the SIZE will be zero. For directories this size will
always be zero.
.TP
.B o PATH
the pathname
.PP
A typical example look like this:
        +33216 1000 1000 8 11288 bin/rdup
.PP
This example tells us, that it should be backed up, it has a user id
and group id of 1000, the length of the path is 8 bytes, the size
of the file it 11288 and it has "bin/rdup" as a path.
.PP
Directories are always printed, as the modification time of directories
is not compared.

.SH OUTPUT FORMAT WITH \-c
The output generated by \fBrdup -c\fR is formatted like:
        +|-MODE UID GID PATH_SIZE FILE_SIZE\\n
        PATH FILE_CONTENTS
.PP
This makes it possible possible for a remote shell script to receive the
actual file and make a backup.
.PP
All field are identical as described in \fBOUTPUT FORMAT\fR, but
there is one extra field and the following cavaets.
.TP
.B o FILE_CONTENTS
The entire file is concatenated to standard output.

.SS CAVAETS
The output when using the \-c is changed as follows, for:
.TP
.B o directories:
the FILE_SIZE is zero and no content is printed. Thus:
        +16877 1000 1000 11 0\\n
        \fB/home/miekg\fR
.TP
.B o regular files:
the FILE_SIZE is used as-is and the entire file contents
is printed to standard output. Thus:
        +33152 1000 1000 32 6\\n
        \fB/home/miekg/svn/rdup/trunk/aaa/a\fR\fIhello\fR

Where \fBaaa/a\fR is a regular file containing the word 'hello\\n'
.TP
.B o symbolic links:
the FILE_SIZE is set to the size of the target name and instead
of printing the file contents the target name is printed. Thus:
        +41471 1000 1000 34 1\\n
        \fB/home/miekg/svn/rdup/trunk/aaa/def\fR\fIb\fR

Where \fBaaa/def\fR is a symbolic link that points to 'b'

.SH SCRIPTS
Various shells scripts are included with rdup. These script actually
implement the backup scheme. These scripts form a family as they
all assume the same backup directory layout. That is: 
.TP
.B o 
each month a new full dump is created in a directory named YYYYMM.
.TP
.B o 
incremental dumps that place in that same directory for the
duration of the month
.TP
.B o 
changed files are backed up with the suffix: +DD.HH:MM, where
DD is the monthday of change.

.PP
The more important scripts are:
.TP
.B rdup-mirror
the main backup script that implements a mirroring backup. It also used
for remote backups (with the -c switch).
.TP
.B rdup-snapshot
Create a (hard link) snapshot. Hard links safe space so you can keep
a very long record of previous backups. This is wrapper around
`rdup-snap` and `rdup`.
.TP
.B rdup-gzip
acts as a compression filter.
.TP
.B rdup-crypt
acts as a encryption filter.
.TP
.B rdup-dump
a wrapper script around `rdup-mirror' and `rdup' that creates
a backup.
.TP
.B rdup-restore
a wrapper scripts around `rdup', `rdup-mirror' to ease restoring.

.SH EXAMPLES

.SS BACKUPS
\fBrdup-dump\fR is a wrapper which implements these (and more) pipelines:

.SS full dump of /home 
rdup /tmp/HOMELIST ~ | rdup-mirror \-b /vol/backup

.SS full gzipped dump of /home
rdup \-c /tmp/HOMELIST ~ | rdup-gzip | rdup-mirror \-c \-b /vol/backup

.SS full remote dump of /home
rdup \-c /tmp/HOMELIST ~ | ssh \-C miekg@example.com rdup-mirror \-c \-b /vol/backup

The \fI\-C\fR compresses the stream.

.SS full encrypted remote dump of /home
rdup \-c /tmp/HOMELIST ~ | rdup-crypt KEYFILE | 
ssh miekg@example.com rdup-mirror \-c \-b /vol/backup

.SS full encrypted, gzipped remote dump of /home

rdup \-c /tmp/HOMELIST ~ | rdup-crypt KEYFILE | rdup-gzip | 
ssh miekg@example.com rdup-mirror \-c \-b /vol/backup

.SS RESTORES
\fBrdup-restore\fR is a wrapper which implements these (and more) pipelines:

.SS restore of /home to /tmp/restore
rdup /dev/null /vol/backup/HOST/200604/home |
rdup-mirror -r -b /tmp/restore

.SH USEFULL EXTERNAL TOOLS
As \fBrdup\fR only prints names it depends on external tools and scripts
to make it really usefull. Luckily there are lots of those:
.TP
.B o cstream 
a tool the implement bandwidth shaping (for remote backups).
.TP
.B o dirsplit 
split a directory into DVD sized volumes for easy burning.

.SH FILES
\fBrdup\fR uses `@sysconfdir@/rdup' as directory where the timestamp
and filelist files are put.

.SH AUTHOR
Written by Miek Gieben. 

.SH REPORTING BUGS
Report bugs to <miek@miek.nl>. 

.SH SEE ALSO
rdup-mirror(8), rdup-dump(8), rdup-snap(8) and rdup-restore(8). See
rdup-backups(8) for an introduction.

.SH COPYRIGHT
Copyright (C) 2005, 2006 Miek Gieben. This is free software. There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE.
.PP
Licensed under the GPL. See the file LICENSE in the source distribution
of rdup.
