#!/bin/bash

# create a (mirror) backup in /vol/backup/`hostname`
# figure out of the dump should be a full one or incremental

prefix=@prefix@
exec_prefix=@exec_prefix@
cstream=@cstream@

usage() {
        echo "$PROGNAME [OPTIONS] NAME DIR [DIR ...]"
        echo 
        echo "This is a wrapper around rdup and mirror.sh"
        echo
        echo NAME - prefix for filelist and timestamp files
        echo DIR \ - directories to back up
        echo
        echo OPTIONS:
        echo " -b DIR     backup directory. Default: /vol/backup/HOSTNAME"
        echo " -c REMOTE  dump the backup on a remote machine with ssh"
        echo " -l NUM     limit transfer to NUM bytes/second, see cstream(1)'s -t"
        echo " -k KEYFILE encrypt all files"
        echo " -a         write extended attributes with uid/gid"
        echo " -e         filelist and timestamp are put in backup directory"
        echo " -z         compress all files"
        echo " -v         echo the files processed to stderr"
        echo " -h         this help"
        echo " -V         print version"
}

version() {
        echo "$PROGNAME: @PACKAGE_VERSION@ (rdup-utils)"
}

d=`date +%Y%m`
etc=0
PROGNAME=$0
BACKUPDIR=""
gzip=0
KEYFILE=""
remote=""
bwidth=""
a=""
v=""

_echo2() {
        echo "** $PROGNAME: $1" > /dev/fd/2
}

while getopts ":b:k:l:c:s:vzehV" o; do
        case $o in
                b) BACKUPDIR=$OPTARG;;
                k) KEYFILE=$OPTARG;;
                c) remote=$OPTARG;;
                l) bwidth=$OPTARG;;
                e) etc=1;;
                z) gzip=1;;
                a) a="-a";;
                v) v="-v";;
                s) echo todo;;
                V) version && exit;;
                h) usage && exit;;
                \?) _echo2 "Invalid option"; usage && exit;;
        esac
done
shift $((OPTIND - 1))
if [[ $# -eq 0 ]]; then
        echo "NAME is mandatory"
        exit 1
fi
if [[ -z $BACKUPDIR ]]; then
        BACKUPDIR="/vol/backup/$HOSTNAME" 
fi

if [[ ! -z "$KEYFILE" && ! -r "$KEYFILE" ]]; then
        _echo2 "Cannot read keyfile \`$KEYFILE': failed"
        exit 1
fi
if [[ ! -z $bwidth && -z $cstream ]]; then
        _echo2 "Bandwidth shaping not enabled: cstream not found"
        exit 1
fi
# where to put the admin files.
if [[ $etc -eq 0 ]]; then
        ETC="/etc/rdup"
else
        ETC="$BACKUPDIR"
fi

NAME=$1  
BACKUPDIR_DATE="$BACKUPDIR/$d"
STAMP="$ETC/$HOSTNAME.$NAME.timestamp"
LIST="$ETC/$HOSTNAME.$NAME.list"
# DIRS in $@
shift
if [[ -z $@ ]]; then
        echo "No directories to backup" 
        exit 1
fi

# check the first directory in the list
mkdir -m 755 -p "$BACKUPDIR"           
if [[ ! -d "$BACKUPDIR_DATE/$1" ]]; then
        # kill the timestamp and inc list
        mkdir -m 755 -p "$BACKUPDIR_DATE"
        rm -f "$LIST"
        rm -f "$STAMP"
        _echo2 "Full dump"
else
        _echo2 "Incremental dump"
fi

if [[ -z "$remote" ]]; then
        # no remote 
        if [[ -z "$KEYFILE" ]]; then
                if [[ $gzip -eq 0 ]]; then
                        @sbindir@/rdup -N $STAMP $LIST $@ | \
                        @sbindir@/mirror.sh $a $v -b "$BACKUPDIR"
                else 
                        @sbindir@/rdup -c -N $STAMP $LIST $@ | @sbindir@/gzip.sh | \
                        @sbindir@/mirror.sh $v $a -c -b "$BACKUPDIR"
                fi
        else
                if [[ $gzip -eq 0 ]]; then
                        @sbindir@/rdup -c -N $STAMP $LIST $@ | @sbindir@/crypt.sh $KEYFILE | \
                        @sbindir@/mirror.sh $v $a -c -b "$BACKUPDIR"
                else 
                        @sbindir@/rdup -c -N $STAMP $LIST $@ | @sbindir@/gzip.sh |\
                        @sbindir@/crypt.sh $KEYFILE | \
                        @sbindir@/mirror.sh $a $v -c -b "$BACKUPDIR"
                fi
        fi
else
        # remote 
        if [[ -z "$KEYFILE" ]]; then
                if [[ $gzip -eq 0 ]]; then
                        if [[ -z $bwidth ]]; then
                                @sbindir@/rdup -c -N $STAMP $LIST $@ | \
                                # do compress stream here
                                ssh -t -x -C "$remote" mirror.sh $a $v -c -b "$BACKUPDIR"
                        else
                                @sbindir@/rdup -c -N $STAMP $LIST $@ | \
                                $cstream -t $bwidth | \
                                ssh -t -x -C "$remote" mirror.sh $a $v -c -b "$BACKUPDIR"
                        fi
                else 
                        if [[ -z $bwidth ]]; then
                                @sbindir@/rdup -c -N $STAMP $LIST $@ | @sbindir@/gzip.sh | \
                                ssh -t -x "$remote" | mirror.sh $a $v -c -b "$BACKUPDIR"
                        else
                                @sbindir@/rdup -c -N $STAMP $LIST $@ | @sbindir@/gzip.sh | \
                                $cstream -t $bwidth | \
                                ssh -t -x "$remote" | mirror.sh $a $v -c -b "$BACKUPDIR"
                        fi
                fi
        else
                if [[ $gzip -eq 0 ]]; then
                        if [[ -z $bwidth ]]; then
                                @sbindir@/rdup -c -N $STAMP $LIST $@ | \
                                @sbindir@/crypt.sh $KEYFILE | \
                                ssh -t -x -C "$remote" mirror.sh $a $v -c -b "$BACKUPDIR"
                        else
                                @sbindir@/rdup -c -N $STAMP $LIST $@ | \
                                @sbindir@/crypt.sh $KEYFILE | \
                                $cstream -t $bwidth | \
                                ssh -t -x -C "$remote" mirror.sh $a $v -c -b "$BACKUPDIR"
                        fi
                else 
                        if [[ -z $bwidth ]]; then
                                @sbindir@/rdup -c -N $STAMP $LIST $@ | @sbindir@/gzip.sh |\
                                @sbindir@/crypt.sh $KEYFILE | 
                                ssh -t -x "$remote" mirror.sh $a $v -c -b "$BACKUPDIR"
                        else
                                @sbindir@/rdup -c -N $STAMP $LIST $@ | @sbindir@/gzip.sh |\
                                @sbindir@/crypt.sh $KEYFILE | 
                                $cstream -t $bwidth | \
                                ssh -t -x "$remote" mirror.sh $a $v -c -b "$BACKUPDIR"
                        fi

                fi
        fi
fi
