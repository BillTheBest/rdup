#!/usr/bin/perl -w
#
# Copyright (c) 2005 - 2007 Miek Gieben; Mark J Hewitt
# See LICENSE for the license
#
use strict;

use Getopt::Std;
use File::Basename;
use File::Temp qw{tempdir tempfile};
use File::Spec;
use POSIX;

# common functions
my $prefix="@prefix@";
my $datarootdir = "@datarootdir@";
require "@datadir@/rdup/shared.pl";

my $progName = basename $0;
my %opt;

getopts('dhV', \%opt);
usage() if $opt{h};
version($progName) if $opt{V};
my $crOptions .= "-d " if $opt{d};

if (!defined($ARGV[0]) or ! -f $ARGV[0]) {
    die "** $progName: Cannot open keyfile";
}
`which mcrypt >/dev/null`;
if ($? != 0) {
    die "** $progName: Cannot find \'mcrypt'";
}

$crOptions .= "-q -F -f $ARGV[0] -a blowfish";

my $tmpDir = tempdir("rdup.crypt.XXXXXX", TMPDIR => 1, CLEANUP => 1);
die "** $progName: $tmpDir could not be created: $!" unless -d $tmpDir;

while (<STDIN>) {
    chomp;
    my ($t, $bits, $uid, $gid, $psize, $fsize) = split(" ", $_, 6);
    my $dump = substr($t, 0, 1);
    my $type = substr($t, 1, 1);

    sanity_check($progName, $dump, $bits, $psize, $fsize, $uid, $gid);

    my $path = "";
    read STDIN, $path, $psize;
    die "** $progName: Empty path"  if ($path eq "");

    if ($dump eq '+') {
	if ($type eq '-') {
	    if ($fsize <= 2) {
		syswrite STDOUT, "$dump$type $bits $uid $gid $psize $fsize\n$path";
		copyout($fsize, *STDOUT);
		continue;
	    }

	    my ($a, $b, $c);
	    if ($opt{d}) {
		($a, $b, $c) = (getc, getc, getc);
	    } else {
		# ooohhh, this *IS* dirty, fake the bytes, so the
		# the next if-statement will trigger
		($a, $b, $c) = (chr 0, chr 109, chr 3);
	    }

	    # from the magic database \0m\3 and \0m\2 is mcrypt, this 
	    # is 0 109 3 and 0 109 2 in decimal
	    if (ord $a == 0 and ord $b == 109 and (ord $c == 2 or ord $c == 3)) {

		my($fh, $filename) = tempfile("file.XXXXX", DIR => $tmpDir, SUFFIX => ".nc" );
		$fh->close();

		open CRYPT, "|mcrypt $crOptions 2>/dev/null > $filename" or die "** $progName: $filename: $!";
		if ($opt{d}) {
		    # put our stolen characters back in the stream
		    syswrite CRYPT, "$a$b$c";
		    copyout($fsize - 3, *CRYPT); # and fix the amount we still need to echo
		} else {
		    copyout($fsize, *CRYPT); 
		}
		close CRYPT or warn "** $progName: Crypt failure: result will be empty \`$path': $!";

		my $size = (stat($filename))[7];
		syswrite STDOUT, "$dump$type $bits $uid $gid $psize $size\n$path";
		catfile($filename);
		unlink $filename;
		continue;
	    } else {
		syswrite STDOUT, "$dump$type $bits $uid $gid $psize $fsize\n$path";
		syswrite STDOUT, "$a$b$c";
		copyout($fsize - 3, *STDOUT);
		continue;
	    }

	}
    }
}



sub usage {
        print "$progName [OPTIONS] KEYFILE\n\n";
        print "Encrypt or decrypt the file's contents with the\n";
        print "key stored in KEYFILE\n\n";
        print "OPTIONS:\n";
        print " -c    ignored as rdup-crypt always works on content\n";
        print " -d    decrypt the files\n";
        print " -h    this help\n";
        print " -V    print version\n";
        exit;
}
