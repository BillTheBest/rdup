'\" t
.TH RDUP 8 "24 Dec 2005" "@PACKAGE_VERSION@" "@PACKAGE_NAME@ utils"
.SH NAME
@PACKAGE_NAME@ \- generate a file list suitable for making backups
.SH SYNOPSIS
.B @PACKAGE_NAME@
[
.IR \-N 
timestamp
]
]
[
.IR OPTIONS
]
.IR FILELIST 
.IR DIRS ...

.SH DESCRIPTION
\fBrdup\fR is a utility inspired by rsync and the plan9 way of doing
backups. \fBrdup\fR itself does not backup anything. It only prints
a list of files that are changed, or all files in case of a null dump.
All paths printed are absolute.
.PP
\fBrdup\fR prints a filelist to standard output. This list is relative
to FILELIST. Subsequent programs in a pipe line can be used to actually
implement to backup scheme. If FILELIST is empty or non existant all
files in DIR are dumped. This is the same as a null dump. After a run
a new FILELIST is written. No warning is given when FILELIST is an
existing file, it just gets overwritten by \fBrdup\fR. New runs will
print out only those files that have actually changed since the last
run, thereby making incremental backups possible.
.PP
Files are checked for changes by comparing the m_time (modification time),
if this time is NEWER than the m_time of FILELIST the pathname is printed
to standard output. All errors are written to standard error.
.PP
The general idea is to be very unix like and create a bunch of simple programs
which each do a their specific thing very well. With \fBrdup\fR and a
small shell script (50 lines) one can implement encrypted and compressed
backups.

.SH OPTIONS
.TP
.B \-h
Give an overview of the options.
.TP
.B \-n
Honor .nobackup files. If such files are found the directory is not
printed to standard output.
.TP
.B \-N timestamp
use the m_time of file TIMESTAMP as the timestamp to decide what to
include in the incremental backup list. If TIMESTAMP does not exist
of full dump is performed. 
.B rdup
will create TIMESTAMP before it starts printing the file list.
.TP
.B \-v
Be more verbose
.TP
.B \-V
Print rdup's version.
.TP
.B \-x
Stay on the local filesystem.
.TP
.B \-0
Delimit all printed/read/written lists with NULL instead of newlines.

.SH FILELIST
\fBrdup\fR write the FILELIST in the following format:
        MODE PATH
.PP
Where MODE is the st_mode from stat(2) and PATH is the path of the file. A
typical example is: 
        33216 bin/rdup

.SH OUTPUT
The output generated by \fBrdup\fR is formatted like:
        +|-MODE UID GID SIZE PATH
.PP
Where:
.TP
.B o +|-
plus or minus, indicating whether PATH should added or removed.
.TP
.B o MODE
the st_mode from stat(2).
.TP
.B o UID
the numerical user id of PATH. Note that if the first character of the
line is '-' (i.e. remove) the UID will be zero.
.TP
.B o GID
the numerical group id of PATH. Note that if the first character of the
line is '-' (i.e. remove) the GID will be zero.
.TP
.B o SIZE
the size of PATH. Note that if the first character of the line is '-'
(.ie. remove) the SIZE will be zero.
.TP
.B o PATH
the pathname
.PP
A typical example look like this:
        +33216 1000 1000 11288 bin/rdup
.PP
Directories are always printed, as the modification time of directories
is not compared.

.SH SCRIPTS
Various shells scripts are included with rdup. These script actually
implement the backup scheme. Currently included are various remote
backup scripts, a local mirroring scheme and an implementation of hdup2

.SH AUTHOR
Written by Miek Gieben. 

.SH REPORTING BUGS
Report bugs to <miek@miek.nl>. 

.SH COPYRIGHT
Copyright (C) 2005, 2006 Miek Gieben. This is free software. There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE.
.PP
Licensed under the GPL. See the file LICENSE in the source distribution
of rdup.
