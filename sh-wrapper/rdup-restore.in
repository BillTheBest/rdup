#!/bin/bash

# create a restore of a backup in -b <dir>

prefix=@prefix@
datarootdir=@datarootdir@
exec_prefix=@exec_prefix@
datadir=@datadir@/rdup

# common stuff
source $datadir/shared.sh

usage() {
        echo "$PROGNAME -b DIR [OPTIONS] DIR [DIR ...]"
        echo 
        echo "This is a wrapper around rdup, rdup-grep and rdup-mirror"
        echo
        echo DIR \ - directories to restore
        echo
        echo OPTIONS:
        echo " -b DIR     restore to this directory, can be given more then once"
        echo " -c REMOTE  restore the backup from a remote machine with ssh"
        echo " -k KEYFILE decrypt all files, using rdup-crypt"
        echo " -z         decompress all files, using rdup-gzip"
        echo " -a         use extended attributes with uid/gid"
        echo " -v         echo the files processed to stderr"
        echo " -x         pass -x to rdup"
        echo " -h         this help"
        echo " -V         print version"
}

PROGNAME=$0
BACKUPDIR=""
pipe=""
ssh=""
while getopts ":ab:k:c:vzxhV" o; do
        case $o in
                b) BACKUPDIR="$OPTARG"
                if [[ -z "$OPTARG" ]]; then
                        _echo2 "-b needs an argument"
                        exit 1
                fi
                ;;
                k) KEYFILE=$OPTARG
                if [[ -z "$OPTARG" ]]; then
                        _echo2 "-k needs an argument"
                        exit 1
                fi
                if [[ ! -r "$OPTARG" ]]; then
                        _echo2 "Cannot read keyfile \`$OPTARG': failed"
                        exit 1
                fi
                pipe="$pipe | @sbindir@/rdup-crypt $OPTARG"
                c="-c"
                ;;
                c)
                if [[ -z $OPTARG ]]; then
                        _echo2 "-c needs an argument"
                        exit 1
                fi
                ssh=" ssh -x $OPTARG"
                c="-c"
                l=""
                ;;
                z) pipe="$pipe | @sbindir@/rdup-gzip"
                c="-c"
                ;;
                a) OPT="$OPT -a";;
                v) OPT="$OPT -v";;
                x) x="-x";;
                V) version && exit;;
                h) usage && exit;;
                \?) _echo2 "Invalid option"; exit 1;;
        esac
done
shift $((OPTIND - 1))
if [[ $# -eq 0 ]]; then
        _echo2 "No directories to restore"
        exit 1
fi
if [[ -z "$BACKUPDIR" ]]; then
        _echo2 "The -b argument is mandatory"
        exit 1
fi

# add pwd if the path was relative
if [[ ${1:0:1} == "/" ]]; then
        dest="$1"
else
        dest="`pwd`/$1"
fi

# reg stuff #
REG='\+\d\d\.\d\d:\d[\d/|\d$]'
grepcmd="@sbindir@/rdup-grep -c -v $REG"

# create the command line
if [[ -z $ssh ]]; then
        pipe="$pipe | @sbindir@/rdup-cp $c $OPT -b $BACKUPDIR/$NOW"
        cmd="@sbindir@/rdup $x $l $c /dev/null $@ $pipe"
else
        pipe="$pipe | $ssh rdup-cp $c $OPT -b $BACKUPDIR/$NOW"
        cmd="@sbindir@/rdup $x $l $c /dev/null $@ $pipe"
fi

# execute the backup command
#_echo2 "Executing: ${cmd}"
echo ${cmd}
exit 1
eval ${cmd}

exit 0
