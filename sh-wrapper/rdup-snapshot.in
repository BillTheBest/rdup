#!/bin/sh

# create a hardlinked backup
# this scripts figures out if the
# dump is incremental or full

prefix=@prefix@
exec_prefix=@exec_prefix@
datadir=@datadir@/rdup
sysconfdir=@sysconfdir@/rdup

# shared stuff
source $datadir/shared.sh

usage() {
        echo "$PROGNAME -b DIR [OPTIONS] DIR [DIR ...]"
        echo
        echo "This is a wrapper around rdup and snap.pl"
        echo
        echo DIR \ - directories to back up
        echo
        echo OPTIONS:
        echo " -b DIR     backup directory"
        echo " -c REMOTE  dump the backup on a remote machine with ssh"
        echo " -k KEYFILE encrypt all files, using crypt.pl"
        echo " -N PREFIX  optional prefix for the timestmp and filelist"
        echo " -z         compress all files, using gzip.pl"
        echo " -a         write extended attributes with uid/gid"
        echo " -e         filelist and timestamp are put in backup directory (not yet)."
        echo " -v         echo the files processed to stderr"
        echo " -x         pass -x to rdup"
        echo " -h         this help"
        echo " -V         print version"
}

PROGNAME=$0
PREFIX=""
NOW=`date +%Y%m/%d`
c=""
l="-l"
ETC="@sysconfdir@/rdup"
pipe=""
ssh=""

while getopts ":ab:k:c:N:vzxhV" o; do
        case $o in
                b) BACKUPDIR="$OPTARG"
                if [[ -z "$OPTARG" ]]; then
                        _echo2 "-b needs an argument"
                        exit 1
                fi
                ;;
                c)
                if [[ -z $OPTARG ]]; then
                        _echo2 "-c needs an argument"
                        exit 1
                fi
                ssh=" ssh -x $OPTARG"
                c="-c"
                l=""
                ;;
                k)
                if [[ -z "$OPTARG" ]]; then
                        _echo2 "-k needs an argument"
                        exit 1
                fi
                if [[ ! -r "$OPTARG" ]]; then
                        _echo2 "Cannot read keyfile \`$OPTARG': failed"
                        exit 1
                fi
                pipe="$pipe | @sbindir@/rdup-crypt $OPTARG"
                c="-c"
                ;;
                z) pipe="$pipe | @sbindir@/rdup-gzip"
                c="-c"
                ;;
                N) PREFIX=$OPTARG
                if [[ -z $OPTARG ]]; then
                        _echo2 "-N needs an argument"
                fi;;
                a) OPT="$OPT -a";;
                v) OPT="$OPT -v";;
                x) x="-x";;
                h) usage && exit;;
                V) version && exit;;
        esac
done
shift $((OPTIND - 1))
if [[ $# -eq 0 ]]; then
        _echo2 "No directories to backup"
        exit 1
fi

if [[ ! -z $PREFIX ]]; then
        STAMP="$ETC/$PREFIX.$HOSTNAME.$(basename $1).timestamp"
        LIST="$ETC/$PREFIX.$HOSTNAME.$(basename $1).list"
else
        STAMP="$ETC/$HOSTNAME.$(basename $1).timestamp"
        LIST="$ETC/$HOSTNAME.$(basename $1).list"
fi
# create our command line
if [[ -z $ssh ]]; then
        pipe="$pipe | @sbindir@/rdup-snap $c $OPT -b $BACKUPDIR/$NOW"
        cmd="@sbindir@/rdup $x $l $c -N $STAMP $LIST $@ $pipe"
else
        pipe="$pipe | $ssh rdup-snap $c $OPT -b $BACKUPDIR/$NOW"
        cmd="@sbindir@/rdup $x $l $c -N $STAMP $LIST $@ $pipe"
fi

mkdir -p $BACKUPDIR
if [[ ! $? ]]; then
        _echo2 "Can not create backup directory"
        exit 1
fi

if [[ -z $ssh ]]; then
        what $BACKUPDIR $NOW; purpose=$? # save return code from what
else
        $ssh "source @datadir@/rdup/shared.sh; what $BACKUPDIR $NOW"
        purpose=$?
fi
case $purpose in
        0)
        _echo2 "INCREMENTAL DUMP"
        ;;
        1)
        _echo2 "FULL DUMP"
        rm -f $LIST
        rm -f $STAMP
        ;;
esac
# execute the backup command
#_echo2 "Executing: ${cmd}"
eval ${cmd}
chmod 755 $BACKUPDIR/$NOW
exit 0
