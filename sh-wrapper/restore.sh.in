#!/bin/bash

# create a restore of a backup in -b <dir>
# figure out of the dump should be a full one or incremental

prefix=@prefix@
exec_prefix=@exec_prefix@
cstream=@cstream@

usage() {
        echo "$PROGNAME -b DIR [OPTIONS] DIR [DIR ...]"
        echo 
        echo "This is a wrapper around rdup, grep.pl and mirror.pl"
        echo
        echo DIR \ - directories to back up
        echo
        echo OPTIONS:
        echo " -b DIR     restore to this directory, can be given more then once"
        echo " -c REMOTE  restore the backup from a remote machine with ssh"
        echo " -l NUM     limit transfer to NUM bytes/second, see cstream(1)'s -t"
        echo " -k KEYFILE decrypt all files, using crypt.pl"
        echo " -z         decompress all files, using gzip.pl"
        echo " -a         use extended attributes with uid/gid"
        echo " -v         echo the files processed to stderr"
        echo " -x         pass -x to rdup"
        echo " -h         this help"
        echo " -V         print version"
}

version() {
        echo "$PROGNAME: @PACKAGE_VERSION@ (rdup-utils)"
}

gzip=false
PROGNAME=$0
BACKUPDIR=""
KEYFILE=""
PREFIX=""
FIRST="" # the first restore dir
remote=""
bwidth=""
a=""
v=""

_echo2() {
        echo "** $PROGNAME: $1" >&2
}

while getopts ":ab:k:l:c:N:vzxhV" o; do
        case $o in
                b) BACKUPDIR="$BACKUPDIR -b $OPTARG"
                if [[ -z $FIRST ]]; then
                        FIRST=$OPTARG
                fi
                if [[ -z "$OPTARG" ]]; then
                        _echo2 "-b needs an argument"
                        exit 1
                fi;;
                k) KEYFILE=$OPTARG
                if [[ -z "$KEYFILE" ]]; then
                        _echo2 "-k needs an argument"
                        exit 1
                fi
                if [[ ! -r "$KEYFILE" ]]; then
                        _echo2 "Cannot read keyfile \`$KEYFILE': failed"
                        exit 1
                fi;;
                c) remote=$OPTARG
                if [[ -z $remote ]]; then
                        _echo2 "-c needs an argument"
                        exit 1
                fi;;
                N) PREFIX=$OPTARG
                if [[ -z $PREFIX ]]; then
                        _echo2 "-N needs an argument"
                fi;;
                l) bwidth=$OPTARG;;
                z) gzip=true;;
                a) a="-a";;
                v) v="-v";;
                x) x="-x";;
                V) version && exit;;
                h) usage && exit;;
                \?) _echo2 "Invalid option"; usage && exit;;
        esac
done
shift $((OPTIND - 1))
if [[ $# -eq 0 ]]; then
        _echo2 "No directories to restore" 
        exit 1
fi
if [[ -z "$BACKUPDIR" ]]; then
        _echo2 "The -b argument is mandatory"
        exit 1
fi

if [[ ! -z $bwidth && -z $cstream ]]; then
        _echo2 "Bandwidth shaping not enabled: cstream not found"
        exit 1
fi

for i in $BACKUPDIR; do
        if [[ !-d "$i/$d" ]]; then 
                _echo2 "No such directory: \`$i/$d'"
                exit 1
        fi
done

# add pwd if the path was relative
if [[ ${1:0:1} == "/" ]]; then
        dest="$1"
else
        dest="`pwd`/$1"
fi

if [[ -z "$remote" ]]; then      # no remote 
        if [[ -z "$KEYFILE" ]]; then
                if $gzip; then
                        @sbindir@/rdup -l $x -c /dev/null $@ |
                        $sbindir@/grep.pl -v '\+\d\d\.\d\d:\d\d$' | \
                        @sbindir@/gzip.pl | \
                        @sbindir@/mirror.pl $v $a -c $BACKUPDIR
                else 
                        @sbindir@/rdup -l $x /dev/null $LIST $@ | \
                        @sbindir@/mirror.pl $a $v $BACKUPDIR
                fi
        else    # with keyfile
                if $gzip; then
                        @sbindir@/rdup -l $x -c -N $STAMP $LIST $@ | @sbindir@/gzip.pl |\
                        $sbindir@/grep.pl -v '\+\d\d\.\d\d:\d\d$' | \
                        @sbindir@/crypt.pl $KEYFILE | \
                        @sbindir@/mirror.pl $a $v -c $BACKUPDIR
                else 
                        @sbindir@/rdup -l $x -c -N $STAMP $LIST $@ |
                        $sbindir@/grep.pl -v '\+\d\d\.\d\d:\d\d$' | \
                        @sbindir@/crypt.pl $KEYFILE | \
                        @sbindir@/mirror.pl $v $a -c $BACKUPDIR
                fi
        fi
else     # remote 
        if [[ -z "$KEYFILE" ]]; then
                if $gzip; then
                        if [[ -z $bwidth ]]; then
                                @sbindir@/rdup $x -c -N $STAMP $LIST $@ | \
                                $sbindir@/grep.pl -v '\+\d\d\.\d\d:\d\d$' | \
                                @sbindir@/gzip.pl | \
                                ssh -x "$remote" | mirror.pl $a $v -c $BACKUPDIR
                        else
                                @sbindir@/rdup $x -c -N $STAMP $LIST $@ | \ 
                                $sbindir@/grep.pl -v '\+\d\d\.\d\d:\d\d$' | \
                                @sbindir@/gzip.pl | \
                                $cstream -t $bwidth | \
                                ssh -x "$remote" | mirror.pl $a $v -c $BACKUPDIR
                        fi
                else    # without gzip
                        if [[ -z $bwidth ]]; then
                                @sbindir@/rdup $x -c -N $STAMP $LIST $@ | \
                                $sbindir@/grep.pl -v '\+\d\d\.\d\d:\d\d$' | \
                                # do compress stream here
                                ssh -x -C "$remote" mirror.pl $a $v -c $BACKUPDIR
                        else
                                @sbindir@/rdup $x -c -N $STAMP $LIST $@ | \
                                $sbindir@/grep.pl -v '\+\d\d\.\d\d:\d\d$' | \
                                $cstream -t $bwidth | \
                                ssh -x -C "$remote" mirror.pl $a $v -c $BACKUPDIR
                        fi
                fi
        else # with keyfile
                if $gzip; then
                        if [[ -z $bwidth ]]; then
                                @sbindir@/rdup $x -c -N $STAMP $LIST $@ | \
                                $sbindir@/grep.pl -v '\+\d\d\.\d\d:\d\d$' | \
                                @sbindir@/gzip.pl |\
                                @sbindir@/crypt.pl $KEYFILE | 
                                ssh -x "$remote" mirror.pl $a $v -c $BACKUPDIR
                        else
                                @sbindir@/rdup $x -c -N $STAMP $LIST $@ | \
                                $sbindir@/grep.pl -v '\+\d\d\.\d\d:\d\d$' | \
                                @sbindir@/gzip.pl |\
                                @sbindir@/crypt.pl $KEYFILE | 
                                $cstream -t $bwidth | \
                                ssh -x "$remote" mirror.pl $a $v -c $BACKUPDIR
                        fi
                else
                        if [[ -z $bwidth ]]; then
                                @sbindir@/rdup $x -c -N $STAMP $LIST $@ | \
                                $sbindir@/grep.pl -v '\+\d\d\.\d\d:\d\d$' | \
                                @sbindir@/crypt.pl $KEYFILE | \
                                ssh -x -C "$remote" mirror.pl $a $v -c $BACKUPDIR
                        else
                                @sbindir@/rdup $x -c -N $STAMP $LIST $@ | \
                                $sbindir@/grep.pl -v '\+\d\d\.\d\d:\d\d$' | \
                                @sbindir@/crypt.pl $KEYFILE | \
                                $cstream -t $bwidth | \
                                ssh -x -C "$remote" mirror.pl $a $v -c $BACKUPDIR
                        fi

                fi
        fi
fi

exit 0
