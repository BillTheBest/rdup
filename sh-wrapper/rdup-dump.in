#!/bin/bash

# create a (mirror) backup in -b dir 
# figure out of the dump should be a full one or incremental

prefix=@prefix@
exec_prefix=@exec_prefix@
datadir=@datadir@/rdup
cstream=@cstream@
sysconfdir=@sysconfdir@

# shared stuff
source $datadir/shared.sh

usage() {
        echo "$PROGNAME -b DIR [OPTIONS] DIR [DIR ...]"
        echo 
        echo "This is a wrapper around rdup and rdup-mirror"
        echo
        echo DIR \ - directories to back up
        echo
        echo OPTIONS:
        echo " -b DIR     backup directory, can be given more then once"
        echo " -c REMOTE  dump the backup on a remote machine with ssh"
        echo " -k KEYFILE encrypt all files, using rdup-crypt"
        echo " -z         compress all files, using rdup-gzip"
        echo " -a         write extended attributes with uid/gid"
        echo " -e         filelist and timestamp are put in backup directory"
        echo " -v         echo the files processed to stderr"
        echo " -x         pass -x to rdup"
        echo " -h         this help"
        echo " -V         print version"
}

d=`date +%Y%m`
etc=false
PROGNAME=$0
BACKUPDIR=""
BACKUPDIR_PLAIN=""
FIRST="" # the first backup dir
OPT=""
pipe=""
ssh=""

while getopts ":ab:k:c:N:vzxehV" o; do
        case $o in
                b) BACKUPDIR="$BACKUPDIR -b $OPTARG/$d"
                BACKUPDIR_PLAIN="$BACKUPDIR_PLAIN $OPTARG"
                if [[ -z $FIRST ]]; then
                        FIRST=$OPTARG
                fi
                if [[ -z "$OPTARG" ]]; then
                        _echo2 "-b needs an argument"
                        exit 1
                fi;;
                k) 
                if [[ -z "$OPTARG" ]]; then
                        _echo2 "-k needs an argument"
                        exit 1
                fi
                if [[ ! -r "$OPTARG" ]]; then
                        _echo2 "Cannot read keyfile \`$OPTARG': failed"
                        exit 1
                fi
                pipe="$pipe | ${exec_prefix}/sbin/rdup-crypt $OPTARG"       
                ;;
                c) 
                if [[ -z $OPTARG ]]; then
                        _echo2 "-c needs an argument"
                        exit 1
                fi
                ssh=" ssh -x $OPTARG"
                ;;
                e) etc=true;;
                z) pipe="$pipe | ${exec_prefix}/sbin/rdup-gzip";;
                a) OPT="$OPT -a";;
                v) OPT="$OPT -v";;
                x) x="-x";;
                V) version && exit;;
                h) usage && exit;;
                \?) _echo2 "Invalid option"; usage && exit;;
        esac
done
shift $((OPTIND - 1))
if [[ $# -eq 0 ]]; then
        _echo2 "No directories to backup" 
        exit 1
fi
if [[ -z "$BACKUPDIR" ]]; then
        _echo2 "The -b argument is mandatory"
        exit 1
fi

if [[ ! -z $bwidth && -z $cstream ]]; then
        _echo2 "Bandwidth shaping not enabled: cstream not found"
        exit 1
fi
# where to put the admin files.
if $etc; then
        if [[ ! -z $remote ]]; then
                _echo2 "The -e option is not compatible with -c"
                exit 1
        fi
        ETC="$FIRST"
else
        ETC="@sysconfdir@/rdup"
fi
STAMP="$ETC/$HOSTNAME.$(basename $1).timestamp"
LIST="$ETC/$HOSTNAME.$(basename $1).list"

# create our command line
if [[ -z $ssh ]]; then
        pipe="$pipe | @sbindir@/rdup-mirror $OPT $BACKUPDIR"
        cmd="@sbindir@/rdup -l $OPT -N $STAMP $LIST $@ $pipe"
else
        pipe="$pipe | $ssh rdup-mirror $OPT $BACKUPDIR"
        cmd="@sbindir@/rdup $OPT -N $STAMP $LIST $@ $pipe"
fi

for i in $BACKUPDIR_PLAIN; do
        mkdir -p "$i/$d"
        if [[ ! $? ]]; then
                _echo2 "Failure to create target backup directory: \`$i/$d'"
                exit 1
        fi
done

# DIRS in $@
# add pwd if the path was relative
if [[ ${1:0:1} == "/" ]]; then
        dest="$1"
else
        dest="`pwd`/$1"
fi
# check what we should do, only for the first dir...
BACKUPDIR_DATE="$FIRST/$d"
if [[ ! -e "$BACKUPDIR_DATE/$dest" ]]; then
        # kill the timestamp and inc list
        rm -f "$LIST"
        rm -f "$STAMP"
        _echo2 "FULL DUMP"
else
        _echo2 "INCREMENTAL dump"
fi
# execute the backup command
eval ${cmd}
exit 0
