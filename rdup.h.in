#ifndef _RDUP_H
#define _RDUP_H

#include <glib.h>

#include "config.h"

#ifndef HAVE_DIRFD
#define rdup_dirfd(d) ((d)->dd_fd)
#endif /* HAVE_DIRFD */

#include <stdio.h>
#include <stdlib.h>
#include <stdarg.h>
#include <unistd.h>
#include <string.h>
#include <ctype.h>
#include <pwd.h>
#include <grp.h>
#include <time.h>
#include <glob.h>
#include <fcntl.h>
#include <signal.h>
#include <dirent.h>
#include <libgen.h>
#include <syslog.h>
#include <errno.h>
#include <utime.h>
#ifdef HAVE_SYS_SYSMACROS_H
#include <sys/sysmacros.h>
#endif /* HAVE_SYS_SYSMACROS_H */
#include <sys/stat.h>
#include <sys/types.h>
#include <sys/wait.h>

#ifdef HAVE_GETTEXT
#include <libintl.h>
#include <locale.h>
#define _(String) gettext (String)
#define gettext_noop(String) String
#define N_(String) gettext_noop (String)
#else
#define _(String) String
#endif /* HAVE_GETTEXT */

#ifdef HAVE_ATTR_XATTR_H
#include <attr/xattr.h>
#endif /* HAVE_ATTR_XATTR_H */

#include "entry.h"

#define VERSION     "@PACKAGE_VERSION@"
#define PROGNAME    "@PACKAGE_NAME@"

#define REG_VECTOR	30
#define BUFSIZE         4096
#define NOBACKUP        ".nobackup"
#define NULL_DUMP       0
#define DIR_SEP         '/'
#define DIR_SEP_STR    "/"
#define VALUE          (void*)1 /* g_tree_lookup returns this in rdup */
#define NO_PRINT       (void*)2 /* don't print values with this flag */
#define D_STACKSIZE    100

#define SHA1_LEN       20 /* bytes of digest */
#define NO_SHA         "0000000000000000000000000000000000000000"

#define LIST_MINSIZE   6
#define LIST_SPACEPOS  5

#define PROTO_BLOCK	"BLOCK"
#define PROTO_VERSION_MAJOR	0
#define	PROTO_VERSION_MINOR	1

#if 0
/* extended attributes */
#define ATTR_SIZE       10
#define R_MAX_ID        2147483646  /* 2 ^ 31 - 2 */
#endif

struct subtract {
        GTree *d; /* diff */
        GTree *b;
};

struct remove_path {
        GTree *tree;
        size_t len;
        char *path;
};

/* gfunc.c */
gint gfunc_equal(gconstpointer a, gconstpointer b);
gboolean gfunc_free(gpointer data, gpointer value, gpointer usr);
gboolean gfunc_write(gpointer data, gpointer value, gpointer fp);
gboolean gfunc_backup(gpointer data, gpointer value, gpointer usr);
gboolean gfunc_remove(gpointer data, gpointer value, gpointer usr);
gboolean gfunc_new(gpointer data, gpointer value, gpointer usr);
gboolean gfunc_subtract(gpointer data, gpointer value, gpointer diff);
gboolean gfunc_remove_path(gpointer data, gpointer value, gpointer path);
gboolean gfunc_regexp(GSList *l, char *n, size_t len);
gboolean gfunc_tree2list(gpointer data, gpointer value, 
	__attribute__((unused)) gpointer l);

/* rdup.c */
void msg(const char *fmt, ...);
/* getdelim.c */
ssize_t rdup_getdelim(char **lineptr, size_t *n, int delim, FILE *stream);
/* abspath.c */
char * abspath(char *path);
/* signal.c */
void signal_abort(int signal);
/* link.c */
gchar * hard_link(GHashTable *t, struct r_entry *e);
struct r_entry *sym_link(struct r_entry *e, char *h_lnk);
/* reverse.c */
GList * reverse(GTree *g);
void  gfunc_new_list(gpointer data, gpointer userdata);
void  gfunc_remove_list(gpointer data, gpointer userdata);
void  gfunc_backup_list(gpointer data, gpointer userdata);
#endif  /* _RDUP_H */
